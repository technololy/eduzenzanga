@implements IDisposable

@inject NavigationManager NavigationManager

<MudNavMenu>
    <MudNavLink Href="" Match="NavLinkMatch.All" Icon="@Icons.Material.Filled.Home">Home</MudNavLink>
    <MudNavGroup Title="Portal Settings" Expanded="false">
        <MudNavLink Href="/class-settings">Class Settings</MudNavLink>
        <MudNavLink Href="/academic-settings">Academic Settings</MudNavLink>
    </MudNavGroup>
    <MudNavGroup Title="Student/Staff Records" Expanded="false">
        <MudNavLink Href="/class-teachers-list">Form Teachers</MudNavLink>
        <MudNavLink Href="/all-students-list">Student Management</MudNavLink>
        <MudNavLink Href="/staff-management">Staff Management</MudNavLink>
        <MudNavLink Href="/my-class">My Class</MudNavLink>
    </MudNavGroup>
    <MudNavGroup Title="Online Exams / Lesson Settings" Expanded="false">
        <MudNavLink Href="/exam-management">Exam Management</MudNavLink>
        <MudNavLink Href="/lesson-notes">Lesson Notes</MudNavLink>
    </MudNavGroup>
    <MudNavGroup Title="Result Management" Expanded="false">
        <MudNavLink Href="/assessment-format">Assessment Format</MudNavLink>
        <MudNavLink Href="/compute-result">Compute Result</MudNavLink>
        <MudNavLink Href="/view-result">View Result</MudNavLink>
    </MudNavGroup>
    
</MudNavMenu>


@code {
    private string? _currentUrl;

    protected override void OnInitialized()
    {
        _currentUrl = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
        NavigationManager.LocationChanged += OnLocationChanged;
    }

    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        _currentUrl = NavigationManager.ToBaseRelativePath(e.Location);
        StateHasChanged();
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= OnLocationChanged;
    }

}